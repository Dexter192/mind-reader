{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\assets\\\\WordTable.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\";\n\nclass WordTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.buildWordList = () => {\n      console.log(\"WordList:::\", this.props.data);\n      console.log(\"Players:::\", this.props);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.props.data[\"wordList\"].map((word, index) => this.buildWord(index, word, this.props.data[\"players\"], this.props.data[\"type\"]))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.toggleWordVisibility = index => {\n      socket.emit('toggle word visibility', index);\n    };\n\n    this.togglePlayerGuess = (id, index) => {\n      socket.emit('toggle player guess for word', id, index);\n    };\n\n    this.removeWord = id => {\n      socket.emit('toggle player guess for word', id, index);\n    };\n\n    this.buildWord = (index, word, players, type) => {\n      if (type === \"host\") {\n        var visibleClass = \"not\".repeat(1 - word[\"visible\"]) + \"visible\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: visibleClass,\n            onClick: () => this.toggleWordVisibility(index),\n            children: word[\"word\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.removePlayer(player['id']),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [players.map(player => {\n              console.log(player[\"guesses\"][index]);\n              var guessed = \"not\".repeat(1 - player[\"guesses\"][index]) + \"guessed\";\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                className: guessed,\n                onClick: () => this.togglePlayerGuess(player[\"id\"], index),\n                children: [player[\"name\"], \" + \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 20\n              }, this);\n            }), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this);\n      }\n\n      if (type === \"player\") {\n        console.log(\"visible \", word[\"visible\"]);\n\n        if (word[\"visible\"]) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: players.map(player => {\n                if (player[\"guesses\"][index]) {\n                  return /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [player[\"name\"], \" + \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 55,\n                    columnNumber: 28\n                  }, this);\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"?????\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Problem loading game content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: this.buildWordList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WordTable;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/assets/WordTable.js"],"names":["React","socket","WordTable","Component","buildWordList","console","log","props","data","map","word","index","buildWord","toggleWordVisibility","emit","togglePlayerGuess","id","removeWord","players","type","visibleClass","repeat","removePlayer","player","guessed","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\nclass WordTable extends React.Component {  \r\n\r\n  buildWordList = () => {\r\n    console.log(\"WordList:::\", this.props.data);\r\n    console.log(\"Players:::\", this.props);\r\n    \r\n    return (\r\n        <div>\r\n          {this.props.data[\"wordList\"].map((word, index) => \r\n            this.buildWord(index, word, this.props.data[\"players\"], this.props.data[\"type\"]) \r\n          )}\r\n        </div>\r\n      )\r\n  }\r\n\r\n  toggleWordVisibility = (index) => {\r\n    socket.emit('toggle word visibility', index);\r\n  }\r\n\r\n  togglePlayerGuess = (id, index) => {\r\n    socket.emit('toggle player guess for word', id, index);\r\n  }\r\n\r\n  removeWord = (id) => {\r\n    socket.emit('toggle player guess for word', id, index);\r\n  }\r\n\r\n  buildWord = (index, word, players, type) => {\r\n    if(type === \"host\") {\r\n      var visibleClass = \"not\".repeat(1-word[\"visible\"]) + \"visible\";\r\n      return (\r\n        <div>\r\n          <span className={visibleClass} onClick={() => this.toggleWordVisibility(index)}>{word[\"word\"]}</span>  \r\n          <button onClick={() => this.removePlayer(player['id'])}>Remove</button>\r\n          <div>{players.map(player => {\r\n            console.log(player[\"guesses\"][index])\r\n            var guessed = \"not\".repeat(1-player[\"guesses\"][index]) + \"guessed\";\r\n            return <span className={guessed} onClick={() => this.togglePlayerGuess(player[\"id\"], index)}>{player[\"name\"]} + </span>\r\n          })} </div>\r\n        </div>\r\n      )\r\n    }\r\n    if(type === \"player\") {\r\n        console.log(\"visible \", word[\"visible\"])\r\n        if(word[\"visible\"]) {\r\n          return (\r\n            <div>\r\n              <h1>{word[\"word\"]}</h1>\r\n              <div>\r\n                {players.map(player => {\r\n                  if (player[\"guesses\"][index]) {\r\n                    return <span>{player[\"name\"]} + </span>\r\n                  }\r\n                })} \r\n              </div>\r\n            </div>\r\n            )        \r\n        } else {\r\n          return (\r\n            <div>\r\n              <h1>?????</h1>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    return <p>Problem loading game content</p>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        {this.buildWordList()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordTable;"]},"metadata":{},"sourceType":"module"}