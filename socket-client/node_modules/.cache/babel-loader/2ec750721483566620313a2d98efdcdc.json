{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\host\\\\CurrentPlayers.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\"; //This screen will have a button for visibility for every list item. \n//If we click the button, it will update itself from hide to show and \n//it will send a message to the socket to update the content. \n//The socket will update the data on the server and will then emit the \n//Updated data to the player-room, where the screen of the players will \n//be rerendered.\n//When a user loggs in, the host should get an updated list of the current users \n//(and he should be able to remove users)\n//Stretch goal: Score counting\n\nclass CurrentPlayers extends React.Component {\n  constructor() {\n    super();\n\n    this.removePlayer = id => {\n      console.log(\"Removing player \", id);\n      socket.emit('remove player', id);\n      socket.emit('get players');\n    };\n\n    this.activePlayers = () => {\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), this.state.players.map(player => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: player['name']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.removePlayer(player['id']),\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)]\n          }, player['id'], true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.state = {\n      players: []\n    };\n    socket.emit('get players');\n  }\n\n  componentDidMount() {\n    socket.on('update players', players => {\n      console.log(\"Updating players\");\n      var p = [];\n      Object.entries(players).map(player => p.push({\n        \"id\": player[0],\n        \"name\": player[1][\"name\"],\n        \"score\": player[1][\"score\"],\n        \"guesses\": player[1][\"guesses\"]\n      }));\n      this.setState({\n        players: p\n      });\n      this.props.data.setPlayerList(p);\n    });\n  }\n\n  render() {\n    return this.activePlayers();\n  }\n\n}\n\nexport default CurrentPlayers;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/host/CurrentPlayers.js"],"names":["React","socket","CurrentPlayers","Component","constructor","removePlayer","id","console","log","emit","activePlayers","state","players","map","player","componentDidMount","on","p","Object","entries","push","setState","props","data","setPlayerList","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAkBdC,YAlBc,GAkBEC,EAAD,IAAQ;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,EAAhC;AACAL,MAAAA,MAAM,CAACQ,IAAP,CAAY,eAAZ,EAA6BH,EAA7B;AACAL,MAAAA,MAAM,CAACQ,IAAP,CAAY,aAAZ;AACD,KAtBa;;AAAA,SAwBdC,aAxBc,GAwBE,MAAM;AACpB,0BACI;AAAA,+BACE;AAAA,kCACE;AAAA,oCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,eAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,MAAM,iBAC5B;AAAA,oCACE;AAAA,wBAAKA,MAAM,CAAC,MAAD;AAAX;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,qCAAI;AAAQ,gBAAA,OAAO,EAAE,MAAM,KAAKT,YAAL,CAAkBS,MAAM,CAAC,IAAD,CAAxB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA,aAASA,MAAM,CAAC,IAAD,CAAf;AAAA;AAAA;AAAA;AAAA,kBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADJ;AAaD,KAtCa;;AAEZ,SAAKH,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGAX,IAAAA,MAAM,CAACQ,IAAP,CAAY,aAAZ;AACD;;AAEDM,EAAAA,iBAAiB,GAAG;AAClBd,IAAAA,MAAM,CAACe,EAAP,CAAU,gBAAV,EAA6BJ,OAAD,IAAa;AACvCL,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,UAAIS,CAAC,GAAG,EAAR;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeP,OAAf,EAAwBC,GAAxB,CAA4BC,MAAM,IAAIG,CAAC,CAACG,IAAF,CAAO;AAAC,cAAKN,MAAM,CAAC,CAAD,CAAZ;AAAiB,gBAAOA,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV,CAAxB;AAA2C,iBAAQA,MAAM,CAAC,CAAD,CAAN,CAAU,OAAV,CAAnD;AAAuE,mBAAUA,MAAM,CAAC,CAAD,CAAN,CAAU,SAAV;AAAjF,OAAP,CAAtC;AACA,WAAKO,QAAL,CAAc;AAACT,QAAAA,OAAO,EAAEK;AAAV,OAAd;AACA,WAAKK,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8BP,CAA9B;AACD,KAND;AAOD;;AAwBDQ,EAAAA,MAAM,GAAG;AACP,WACE,KAAKf,aAAL,EADF;AAGD;;AA9C0C;;AAiD7C,eAAeR,cAAf","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\n//This screen will have a button for visibility for every list item. \r\n//If we click the button, it will update itself from hide to show and \r\n//it will send a message to the socket to update the content. \r\n//The socket will update the data on the server and will then emit the \r\n//Updated data to the player-room, where the screen of the players will \r\n//be rerendered.\r\n\r\n\r\n//When a user loggs in, the host should get an updated list of the current users \r\n//(and he should be able to remove users)\r\n\r\n\r\n//Stretch goal: Score counting\r\n\r\nclass CurrentPlayers extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      players: [],\r\n    };\r\n    socket.emit('get players')\r\n  }\r\n    \r\n  componentDidMount() {\r\n    socket.on('update players', (players) => {\r\n      console.log(\"Updating players\")\r\n      var p = [];\r\n      Object.entries(players).map(player => p.push({\"id\":player[0], \"name\":player[1][\"name\"], \"score\":player[1][\"score\"], \"guesses\":player[1][\"guesses\"]}));\r\n      this.setState({players: p});\r\n      this.props.data.setPlayerList(p);\r\n    })\r\n  }\r\n\r\n  removePlayer = (id) => {\r\n    console.log(\"Removing player \", id);\r\n    socket.emit('remove player', id);\r\n    socket.emit('get players')\r\n  }\r\n\r\n  activePlayers = () => {\r\n    return (\r\n        <table>\r\n          <tbody>\r\n            <tr><th>Name</th><th>Remove</th></tr>\r\n            {this.state.players.map(player => \r\n              <tr key={player['id']}>\r\n                <td>{player['name']}</td>\r\n                <td><button onClick={() => this.removePlayer(player['id'])}>Remove</button></td>\r\n              </tr>)\r\n            }\r\n          </tbody>\r\n        </table>\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      this.activePlayers()\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentPlayers;"]},"metadata":{},"sourceType":"module"}