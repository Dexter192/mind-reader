{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\util\\\\WordTable.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\";\n\nclass WordTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.buildWordList = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordTable\",\n        children: [this.props.data[\"wordList\"].map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"wordHeader\",\n            children: [\"Word \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"hr\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 15\n          }, this), this.buildWord(index, word, this.props.data[\"players\"], this.props.data[\"type\"])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 13\n        }, this)), this.fillRemainingDivs(this.props.data[\"wordList\"].length)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.fillRemainingDivs = start => {\n      var emptyWords = [];\n\n      for (var i = start + 1; i <= 10; i++) {\n        emptyWords.push(this.emptyFrame(i));\n      }\n\n      return emptyWords;\n    };\n\n    this.emptyFrame = i => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"wordHeader\",\n          children: [\"Word \", i]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"hr\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this);\n    };\n\n    this.toggleWordVisibility = index => {\n      socket.emit('toggle word visibility', index);\n    };\n\n    this.togglePlayerGuess = (id, index) => {\n      socket.emit('toggle player guess for word', id, index);\n    };\n\n    this.removeWord = index => {\n      socket.emit('remove word', index);\n    };\n\n    this.buildWord = (index, word, players, type) => {\n      var colours = ['#8934B8', '#0A53DE', '#24D024', '#FBF21A', '#FB6F24', '#EA0D0D'];\n      var playerIndex = 1;\n\n      if (type === \"host\") {\n        var visibleClass = \"not\".repeat(1 - word[\"visible\"]) + \"visible\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: visibleClass,\n              onClick: () => this.toggleWordVisibility(index),\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerGuesses\",\n            children: [players.map(player => {\n              var guessed = \"not\".repeat(1 - player[\"guesses\"][index]) + \"guessed\";\n              playerIndex += 1;\n              return /*#__PURE__*/_jsxDEV(\"p\", {\n                className: guessed,\n                onClick: () => this.togglePlayerGuess(player[\"id\"], index),\n                children: [player[\"name\"], \" + \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 22\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"removeWord\",\n              onClick: () => this.removeWord(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this);\n      }\n\n      if (type === \"player\") {\n        if (word[\"visible\"]) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"playerGuesses\",\n              children: players.map(player => {\n                if (player[\"guesses\"][index]) {\n                  playerIndex += 1;\n                  return /*#__PURE__*/_jsxDEV(\"p\", {\n                    style: {\n                      'background-color': colours[playerIndex % colours.length]\n                    },\n                    className: \"playerGuess\",\n                    children: player[\"name\"]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 28\n                  }, this);\n                }\n\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"playerGuess\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 26\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"?????\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Problem loading game content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      children: this.buildWordList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WordTable;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/util/WordTable.js"],"names":["React","socket","WordTable","Component","buildWordList","props","data","map","word","index","buildWord","fillRemainingDivs","length","start","emptyWords","i","push","emptyFrame","toggleWordVisibility","emit","togglePlayerGuess","id","removeWord","players","type","colours","playerIndex","visibleClass","repeat","player","guessed","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\nclass WordTable extends React.Component {  \r\n\r\n  buildWordList = () => {\r\n    return (\r\n        <div className=\"wordTable\">\r\n          {this.props.data[\"wordList\"].map((word, index) => \r\n            <div className=\"wordContainer\">\r\n              <p className=\"wordHeader\">Word {index+1}</p>\r\n              <hr className=\"hr\"/>\r\n              {this.buildWord(index, word, this.props.data[\"players\"], this.props.data[\"type\"])}\r\n            </div>\r\n          )\r\n          }  \r\n          {this.fillRemainingDivs(this.props.data[\"wordList\"].length)}\r\n        </div>\r\n      )\r\n  }\r\n\r\n  fillRemainingDivs = (start) => {\r\n    var emptyWords = [];\r\n    for (var i = start+1; i <= 10; i++) {\r\n      emptyWords.push(this.emptyFrame(i));\r\n    }\r\n    return emptyWords\r\n  }\r\n\r\n  emptyFrame = (i) => {\r\n    return (\r\n    <div className=\"wordContainer\">\r\n      <p className=\"wordHeader\">Word {i}</p>\r\n      <hr className=\"hr\"/>\r\n    </div>)\r\n  }\r\n\r\n  toggleWordVisibility = (index) => {\r\n    socket.emit('toggle word visibility', index);\r\n  }\r\n\r\n  togglePlayerGuess = (id, index) => {\r\n    socket.emit('toggle player guess for word', id, index);\r\n  }\r\n\r\n  removeWord = (index) => {\r\n    socket.emit('remove word', index);\r\n  }\r\n\r\n  buildWord = (index, word, players, type) => {\r\n    var colours = ['#8934B8', '#0A53DE', '#24D024', '#FBF21A', '#FB6F24', '#EA0D0D']\r\n    var playerIndex = 1;\r\n    if(type === \"host\") {\r\n      var visibleClass = \"not\".repeat(1-word[\"visible\"]) + \"visible\";\r\n      return (\r\n        <div className=\"word\">\r\n            <h1><span className={visibleClass} onClick={() => this.toggleWordVisibility(index)}>{word[\"word\"]}</span></h1>\r\n            <div className=\"playerGuesses\">\r\n              {players.map(player => {\r\n              var guessed = \"not\".repeat(1-player[\"guesses\"][index]) + \"guessed\";\r\n              playerIndex += 1;\r\n              return <p className={guessed} onClick={() => this.togglePlayerGuess(player[\"id\"], index)}>{player[\"name\"]} + </p>\r\n            })} \r\n            <button className=\"removeWord\" onClick={() => this.removeWord(index)}>Remove</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    if(type === \"player\") {\r\n        if(word[\"visible\"]) {\r\n          return (\r\n            <div className=\"word\">\r\n              <h1>{word[\"word\"]}</h1>\r\n                <div className=\"playerGuesses\">\r\n                {players.map(player => {\r\n                  if (player[\"guesses\"][index]) {\r\n                    playerIndex += 1;\r\n                    return <p style={{'background-color':colours[playerIndex%colours.length]}} className=\"playerGuess\">{player[\"name\"]}</p>\r\n                  }\r\n                  return <p className=\"playerGuess\"></p>\r\n                })} \r\n                </div>\r\n            </div>\r\n            )        \r\n        } else {\r\n          return (\r\n            <div className=\"word\">\r\n              <h1>?????</h1>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    return <p>Problem loading game content</p>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"frame\">\r\n        {this.buildWordList()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordTable;"]},"metadata":{},"sourceType":"module"}