{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\host\\\\CurrentPlayers.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\"; //This screen will have a button for visibility for every list item. \n//If we click the button, it will update itself from hide to show and \n//it will send a message to the socket to update the content. \n//The socket will update the data on the server and will then emit the \n//Updated data to the player-room, where the screen of the players will \n//be rerendered.\n//When a user loggs in, the host should get an updated list of the current users \n//(and he should be able to remove users)\n//Stretch goal: Score counting\n\nclass CurrentPlayers extends React.Component {\n  constructor() {\n    super();\n\n    this.removePlayer = () => {//socket.emit remove player\n    };\n\n    this.activePlayers = () => {\n      //console.log(\"Current players: \" + JSON.stringify(this.state.players, null, 4));\n      //{this.state.players.map(player => <h2>{player}</h2>)}\n      const names = ['Bruce', 'Clark', 'Diana'];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.players.map(player => /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: player['name']\n        }, player['id'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.state = {\n      players: []\n    };\n    socket.emit('get players');\n  }\n\n  componentDidMount() {\n    socket.on('update players', players => {\n      var p = [];\n      Object.entries(players).map(player => p.push({\n        \"id\": player[0],\n        \"name\": player[1][\"name\"]\n      }));\n      this.setState({\n        players: p\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: this.activePlayers()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CurrentPlayers;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/host/CurrentPlayers.js"],"names":["React","socket","CurrentPlayers","Component","constructor","removePlayer","activePlayers","names","state","players","map","player","emit","componentDidMount","on","p","Object","entries","push","setState","render","textAlign"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgBdC,YAhBc,GAgBC,MAAM,CACnB;AACD,KAlBa;;AAAA,SAoBdC,aApBc,GAoBE,MAAM;AACpB;AACQ;AACR,YAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAd;AACA,0BACI;AAAA,kBACG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,MAAM,iBAAI;AAAA,oBAAwBA,MAAM,CAAC,MAAD;AAA9B,WAASA,MAAM,CAAC,IAAD,CAAf;AAAA;AAAA;AAAA;AAAA,gBAAjC;AADH;AAAA;AAAA;AAAA;AAAA,cADJ;AAKD,KA7Ba;;AAEZ,SAAKH,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGAR,IAAAA,MAAM,CAACW,IAAP,CAAY,aAAZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBZ,IAAAA,MAAM,CAACa,EAAP,CAAU,gBAAV,EAA6BL,OAAD,IAAa;AACvC,UAAIM,CAAC,GAAG,EAAR;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeR,OAAf,EAAwBC,GAAxB,CAA4BC,MAAM,IAAII,CAAC,CAACG,IAAF,CAAO;AAAC,cAAKP,MAAM,CAAC,CAAD,CAAZ;AAAiB,gBAAOA,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV;AAAxB,OAAP,CAAtC;AACA,WAAKQ,QAAL,CAAc;AAACV,QAAAA,OAAO,EAAEM;AAAV,OAAd;AACD,KAJD;AAKD;;AAiBDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,gBACG,KAAKf,aAAL;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAvC0C;;AA0C7C,eAAeJ,cAAf","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\n//This screen will have a button for visibility for every list item. \r\n//If we click the button, it will update itself from hide to show and \r\n//it will send a message to the socket to update the content. \r\n//The socket will update the data on the server and will then emit the \r\n//Updated data to the player-room, where the screen of the players will \r\n//be rerendered.\r\n\r\n\r\n//When a user loggs in, the host should get an updated list of the current users \r\n//(and he should be able to remove users)\r\n\r\n\r\n//Stretch goal: Score counting\r\n\r\nclass CurrentPlayers extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      players: [],\r\n    };\r\n    socket.emit('get players')\r\n  }\r\n    \r\n  componentDidMount() {\r\n    socket.on('update players', (players) => {\r\n      var p = [];\r\n      Object.entries(players).map(player => p.push({\"id\":player[0], \"name\":player[1][\"name\"]}));\r\n      this.setState({players: p});\r\n    })  \r\n  }\r\n\r\n  removePlayer = () => {\r\n    //socket.emit remove player\r\n  }\r\n\r\n  activePlayers = () => {\r\n    //console.log(\"Current players: \" + JSON.stringify(this.state.players, null, 4));\r\n            //{this.state.players.map(player => <h2>{player}</h2>)}\r\n    const names = ['Bruce', 'Clark', 'Diana']\r\n    return (\r\n        <div>\r\n          {this.state.players.map(player => <h2 key={player['id']}>{player['name']}</h2>)}\r\n        </div>\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        {this.activePlayers()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentPlayers;"]},"metadata":{},"sourceType":"module"}