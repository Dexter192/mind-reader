{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\host\\\\HostScreen.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\";\nimport CurrentPlayers from \"./CurrentPlayers\";\nimport WordMenu from \"./WordMenu\";\nimport WordTable from \"../assets/WordTable\"; //This screen will have a button for visibility for every list item. \n//If we click the button, it will update itself from hide to show and \n//it will send a message to the socket to update the content. \n//The socket will update the data on the server and will then emit the \n//Updated data to the player-room, where the screen of the players will \n//be rerendered.\n//When a user loggs in, the host should get an updated list of the current users \n//(and he should be able to remove users)\n//Stretch goal: Score counting\n\nclass HostScreen extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      players: [],\n      wordList: [{\n        \"word\": \"word\",\n        \"visible\": true,\n        \"guesses\": [\"Guess1\", \"Guess2\"]\n      }]\n    };\n    CurrentPlayers();\n  }\n\n  componentDidMount() {\n    socket.on('toggle screen', s => {\n      console.log('Test');\n      document.body.style.backgroundColor = 'green';\n    });\n    socket.on('update wordList', words => {\n      console.log(\"Updating words\", words);\n      this.setState({\n        wordList: words\n      });\n    });\n    console.log(CurrentPlayers.state);\n  }\n\n  setPlayerList(playerList) {\n    this.setState(player, playerList);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        onChange: this.handleItemChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(CurrentPlayers, {\n        data: (this.state.players, setPlayerList)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordMenu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordTable, {\n        wordList: {\n          \"wordList\": this.state.wordList,\n          \"type\": \"host\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default HostScreen;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/host/HostScreen.js"],"names":["React","socket","CurrentPlayers","WordMenu","WordTable","HostScreen","Component","constructor","state","players","wordList","componentDidMount","on","s","console","log","document","body","style","backgroundColor","words","setState","setPlayerList","playerList","player","render","textAlign","handleItemChange"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAEvCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,QAAQ,EAAE,CAAC;AAAC,gBAAO,MAAR;AAAgB,mBAAW,IAA3B;AAAiC,mBAAU,CAAC,QAAD,EAAW,QAAX;AAA3C,OAAD;AAFC,KAAb;AAIAR,IAAAA,cAAc;AACf;;AAEDS,EAAAA,iBAAiB,GAAG;AAClBV,IAAAA,MAAM,CAACW,EAAP,CAAU,eAAV,EAA4BC,CAAD,IAAO;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsC,OAAtC;AACD,KAHD;AAIAlB,IAAAA,MAAM,CAACW,EAAP,CAAU,iBAAV,EAA8BQ,KAAD,IAAW;AACpCN,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,KAA9B;AACA,WAAKC,QAAL,CAAc;AAACX,QAAAA,QAAQ,EAAEU;AAAX,OAAd;AACH,KAHD;AAIAN,IAAAA,OAAO,CAACC,GAAR,CAAYb,cAAc,CAACM,KAA3B;AACD;;AAEDc,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKF,QAAL,CAAcG,MAAd,EAAsBD,UAAtB;AAEH;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,QAAQ,EAAE,KAAKC;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,eAC0E;AAAA;AAAA;AAAA;AAAA,cAD1E,eAEE,QAAC,cAAD;AAAgB,QAAA,IAAI,GAAE,KAAKnB,KAAL,CAAWC,OAAX,EAAoBa,aAAtB;AAApB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAE;AAAC,sBAAW,KAAKd,KAAL,CAAWE,QAAvB;AAAiC,kBAAO;AAAxC;AAArB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AArCsC;;AAwCzC,eAAeL,UAAf","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\nimport CurrentPlayers from \"./CurrentPlayers\"\r\nimport WordMenu from \"./WordMenu\"\r\nimport WordTable from \"../assets/WordTable\"\r\n\r\n//This screen will have a button for visibility for every list item. \r\n//If we click the button, it will update itself from hide to show and \r\n//it will send a message to the socket to update the content. \r\n//The socket will update the data on the server and will then emit the \r\n//Updated data to the player-room, where the screen of the players will \r\n//be rerendered.\r\n\r\n\r\n//When a user loggs in, the host should get an updated list of the current users \r\n//(and he should be able to remove users)\r\n\r\n\r\n//Stretch goal: Score counting\r\n\r\nclass HostScreen extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      players: [],\r\n      wordList: [{\"word\":\"word\", \"visible\": true, \"guesses\":[\"Guess1\", \"Guess2\"]}]\r\n    };\r\n    CurrentPlayers()\r\n  }   \r\n    \r\n  componentDidMount() {\r\n    socket.on('toggle screen', (s) => {\r\n      console.log('Test')\r\n      document.body.style.backgroundColor = 'green';\r\n    })\r\n    socket.on('update wordList', (words) => {\r\n        console.log(\"Updating words\", words)\r\n        this.setState({wordList: words});\r\n    })  \r\n    console.log(CurrentPlayers.state)\r\n  }\r\n\r\n  setPlayerList(playerList) {\r\n      this.setState(player, playerList)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <input type=\"text\" name=\"name\" onChange={this.handleItemChange}></input><br/>\r\n        <CurrentPlayers data={this.state.players, setPlayerList}/>\r\n        <WordMenu/>\r\n        <WordTable wordList={{\"wordList\":this.state.wordList, \"type\":\"host\"}} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HostScreen;"]},"metadata":{},"sourceType":"module"}