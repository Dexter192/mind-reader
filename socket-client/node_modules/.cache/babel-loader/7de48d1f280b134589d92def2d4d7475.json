{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\player\\\\PlayerScreen.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\";\nimport WordTable from \"../assets/WordTable\";\n\nclass PlayerScreen extends React.Component {\n  constructor() {\n    super();\n\n    this.tempAddWord = word => {\n      socket.emit('add word', word);\n    };\n\n    this.handleNameChange = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.state = {\n      players: [],\n      wordList: []\n    };\n    socket.emit('clear wordList');\n    this.tempAddWord(\"Word1\");\n    this.tempAddWord(\"Word2\");\n    this.tempAddWord(\"Word3\");\n    this.tempAddWord(\"Word4\");\n    socket.emit('fetch wordlist');\n  }\n\n  componentDidMount() {\n    socket.on('toggle screen', s => {\n      console.log('Test');\n    });\n    socket.on('update wordList', words => {\n      console.log(\"Updating words\", words);\n      this.setState({\n        wordList: words\n      });\n    });\n    socket.on('update players', players => {\n      var p = [];\n      Object.entries(players).map(player => p.push({\n        \"id\": player[0],\n        \"name\": player[1][\"name\"],\n        \"guesses\": player[1][\"guesses\"]\n      }));\n      this.setState({\n        players: p\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        data: {\n          \"type\": \"player\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordTable, {\n        data: {\n          \"wordList\": this.state.wordList,\n          \"players\": this.state.players,\n          \"type\": \"player\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PlayerScreen;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/player/PlayerScreen.js"],"names":["React","socket","WordTable","PlayerScreen","Component","constructor","tempAddWord","word","emit","handleNameChange","event","setState","name","target","value","state","players","wordList","componentDidMount","on","s","console","log","words","p","Object","entries","map","player","push","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAcdC,WAdc,GAcCC,IAAD,IAAU;AACtBN,MAAAA,MAAM,CAACO,IAAP,CAAY,UAAZ,EAAwBD,IAAxB;AACD,KAhBa;;AAAA,SAiCdE,gBAjCc,GAiCMC,KAAD,IAAW;AAC5B,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAApB,OAAd;AACD,KAnCa;;AAEZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAIAhB,IAAAA,MAAM,CAACO,IAAP,CAAY,gBAAZ;AACA,SAAKF,WAAL,CAAiB,OAAjB;AACA,SAAKA,WAAL,CAAiB,OAAjB;AACA,SAAKA,WAAL,CAAiB,OAAjB;AACA,SAAKA,WAAL,CAAiB,OAAjB;AACAL,IAAAA,MAAM,CAACO,IAAP,CAAY,gBAAZ;AACD;;AAMDU,EAAAA,iBAAiB,GAAG;AAClBjB,IAAAA,MAAM,CAACkB,EAAP,CAAU,eAAV,EAA4BC,CAAD,IAAO;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,KAFD;AAGArB,IAAAA,MAAM,CAACkB,EAAP,CAAU,iBAAV,EAA8BI,KAAD,IAAW;AACpCF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,KAA9B;AACA,WAAKZ,QAAL,CAAc;AAACM,QAAAA,QAAQ,EAAEM;AAAX,OAAd;AACH,KAHD;AAIAtB,IAAAA,MAAM,CAACkB,EAAP,CAAU,gBAAV,EAA6BH,OAAD,IAAa;AACrC,UAAIQ,CAAC,GAAG,EAAR;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeV,OAAf,EAAwBW,GAAxB,CAA4BC,MAAM,IAAIJ,CAAC,CAACK,IAAF,CAAO;AAAC,cAAKD,MAAM,CAAC,CAAD,CAAZ;AAAiB,gBAAOA,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV,CAAxB;AAA2C,mBAAUA,MAAM,CAAC,CAAD,CAAN,CAAU,SAAV;AAArD,OAAP,CAAtC;AACA,WAAKjB,QAAL,CAAc;AAACK,QAAAA,OAAO,EAAEQ;AAAV,OAAd;AACH,KAJD;AAKD;;AAMDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAE;AAAC,kBAAO;AAAR;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAE;AAAC,sBAAW,KAAKf,KAAL,CAAWE,QAAvB;AAAiC,qBAAU,KAAKF,KAAL,CAAWC,OAAtD;AAA+D,kBAAO;AAAtE;AAAjB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA7CwC;;AAgD3C,eAAeb,YAAf","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\nimport WordTable from \"../assets/WordTable\"\r\n\r\nclass PlayerScreen extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      players: [],\r\n      wordList: []\r\n    };\r\n    socket.emit('clear wordList');\r\n    this.tempAddWord(\"Word1\")\r\n    this.tempAddWord(\"Word2\")\r\n    this.tempAddWord(\"Word3\")\r\n    this.tempAddWord(\"Word4\")  \r\n    socket.emit('fetch wordlist')\r\n  }\r\n  \r\n  tempAddWord = (word) => {\r\n    socket.emit('add word', word);\r\n  }\r\n  \r\n  componentDidMount() {\r\n    socket.on('toggle screen', (s) => {\r\n      console.log('Test')\r\n    })\r\n    socket.on('update wordList', (words) => {\r\n        console.log(\"Updating words\", words)\r\n        this.setState({wordList: words});\r\n    })  \r\n    socket.on('update players', (players) => {\r\n        var p = [];\r\n        Object.entries(players).map(player => p.push({\"id\":player[0], \"name\":player[1][\"name\"], \"guesses\":player[1][\"guesses\"]}));\r\n        this.setState({players: p});\r\n    })\r\n  }\r\n\r\n  handleNameChange = (event) => {\r\n    this.setState({name: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Timer data={{\"type\":\"player\"}}/>\r\n        <WordTable data={{\"wordList\":this.state.wordList, \"players\":this.state.players, \"type\":\"player\"}} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerScreen;"]},"metadata":{},"sourceType":"module"}