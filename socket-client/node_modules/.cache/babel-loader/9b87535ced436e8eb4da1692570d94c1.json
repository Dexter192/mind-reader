{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\host\\\\CurrentPlayers.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\"; //This screen will have a button for visibility for every list item. \n//If we click the button, it will update itself from hide to show and \n//it will send a message to the socket to update the content. \n//The socket will update the data on the server and will then emit the \n//Updated data to the player-room, where the screen of the players will \n//be rerendered.\n//When a user loggs in, the host should get an updated list of the current users \n//(and he should be able to remove users)\n//Stretch goal: Score counting\n\nclass CurrentPlayers extends React.Component {\n  constructor() {\n    super();\n\n    this.removePlayer = id => {\n      console.log(\"Removing player \", id); //socket.emit remove player\n    };\n\n    this.activePlayers = () => {\n      const names = ['Bruce', 'Clark', 'Diana'];\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        children: this.state.players.map(player => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: player['name']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, player['id'], true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.state = {\n      players: []\n    };\n    socket.emit('get players');\n  }\n\n  componentDidMount() {\n    socket.on('update players', players => {\n      var p = [];\n      Object.entries(players).map(player => p.push({\n        \"id\": player[0],\n        \"name\": player[1][\"name\"]\n      }));\n      this.setState({\n        players: p\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: this.activePlayers()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CurrentPlayers;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/host/CurrentPlayers.js"],"names":["React","socket","CurrentPlayers","Component","constructor","removePlayer","id","console","log","activePlayers","names","state","players","map","player","emit","componentDidMount","on","p","Object","entries","push","setState","render","textAlign"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgBdC,YAhBc,GAgBEC,EAAD,IAAQ;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,EAAhC,EADmB,CAErB;AACD,KAnBa;;AAAA,SAqBdG,aArBc,GAqBE,MAAM;AACpB,YAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAd;AACA,0BACI;AAAA,kBACG,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBC,MAAM,iBAC5B;AAAA,kCACE;AAAA,sBAAKA,MAAM,CAAC,MAAD;AAAX;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,mCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAASA,MAAM,CAAC,IAAD,CAAf;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADJ;AASD,KAhCa;;AAEZ,SAAKH,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGAX,IAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBf,IAAAA,MAAM,CAACgB,EAAP,CAAU,gBAAV,EAA6BL,OAAD,IAAa;AACvC,UAAIM,CAAC,GAAG,EAAR;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeR,OAAf,EAAwBC,GAAxB,CAA4BC,MAAM,IAAII,CAAC,CAACG,IAAF,CAAO;AAAC,cAAKP,MAAM,CAAC,CAAD,CAAZ;AAAiB,gBAAOA,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV;AAAxB,OAAP,CAAtC;AACA,WAAKQ,QAAL,CAAc;AAACV,QAAAA,OAAO,EAAEM;AAAV,OAAd;AACD,KAJD;AAKD;;AAoBDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,gBACG,KAAKf,aAAL;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA1C0C;;AA6C7C,eAAeP,cAAf","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\n//This screen will have a button for visibility for every list item. \r\n//If we click the button, it will update itself from hide to show and \r\n//it will send a message to the socket to update the content. \r\n//The socket will update the data on the server and will then emit the \r\n//Updated data to the player-room, where the screen of the players will \r\n//be rerendered.\r\n\r\n\r\n//When a user loggs in, the host should get an updated list of the current users \r\n//(and he should be able to remove users)\r\n\r\n\r\n//Stretch goal: Score counting\r\n\r\nclass CurrentPlayers extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      players: [],\r\n    };\r\n    socket.emit('get players')\r\n  }\r\n    \r\n  componentDidMount() {\r\n    socket.on('update players', (players) => {\r\n      var p = [];\r\n      Object.entries(players).map(player => p.push({\"id\":player[0], \"name\":player[1][\"name\"]}));\r\n      this.setState({players: p});\r\n    })  \r\n  }\r\n\r\n  removePlayer = (id) => {\r\n      console.log(\"Removing player \", id)\r\n    //socket.emit remove player\r\n  }\r\n\r\n  activePlayers = () => {\r\n    const names = ['Bruce', 'Clark', 'Diana']\r\n    return (\r\n        <table>\r\n          {this.state.players.map(player => \r\n            <tr key={player['id']}>\r\n              <td>{player['name']}</td>\r\n              <td><button>Remove</button></td>\r\n            </tr>)}\r\n        </table>\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        {this.activePlayers()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentPlayers;"]},"metadata":{},"sourceType":"module"}