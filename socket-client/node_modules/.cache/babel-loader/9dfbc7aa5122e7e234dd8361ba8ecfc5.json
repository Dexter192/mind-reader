{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\util\\\\Score.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\";\n\nclass Score extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.drawScoreBar = () => {\n      this.props.data[\"players\"].map(player => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"playerScore\",\n          children: [player[\"name\"], \" - \", player[\"score\"], \" Test \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 9\n        }, this);\n      });\n    };\n\n    this.buildWordList = () => {\n      console.log(\"WORDPLAYERS\", this.props.players);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordTable\",\n        children: [this.props.data[\"wordList\"].map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"wordHeader\",\n            children: [\"Word \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"hr\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 15\n          }, this), this.buildWord(index, word, this.props.data[\"players\"], this.props.data[\"type\"])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)), this.fillRemainingDivs(this.props.data[\"wordList\"].length)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.buildWord = (index, word, players, type) => {\n      if (type === \"host\") {\n        var visibleClass = \"not\".repeat(1 - word[\"visible\"]) + \"visible\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: visibleClass,\n              onClick: () => this.toggleWordVisibility(index),\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playerGuesses\",\n            children: [players.map(player => {\n              var guessed = \"not\".repeat(1 - player[\"guesses\"][index]) + \"guessed\";\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                className: guessed,\n                onClick: () => this.togglePlayerGuess(player[\"id\"], index),\n                children: [player[\"name\"], \" + \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 22\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"removeWord\",\n              onClick: () => this.removeWord(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this);\n      }\n\n      if (type === \"player\") {\n        if (word[\"visible\"]) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"playerGuesses\",\n              children: players.map(player => {\n                if (player[\"guesses\"][index]) {\n                  return /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"playerGuess\",\n                    children: player[\"name\"]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 28\n                  }, this);\n                }\n\n                return /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"playerGuess\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 26\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"?????\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Problem loading game content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      children: this.drawScoreBar()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Score;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/util/Score.js"],"names":["React","socket","Score","Component","drawScoreBar","props","data","map","player","buildWordList","console","log","players","word","index","buildWord","fillRemainingDivs","length","type","visibleClass","repeat","toggleWordVisibility","guessed","togglePlayerGuess","removeWord","render"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SAElCC,YAFkC,GAEnB,MAAM;AACnB,WAAKC,KAAL,CAAWC,IAAX,CAAgB,SAAhB,EAA2BC,GAA3B,CAA+BC,MAAM,IAAI;AACvC,4BACE;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA,qBAA+BA,MAAM,CAAC,MAAD,CAArC,SAAkDA,MAAM,CAAC,OAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD,OAJD;AAKD,KARiC;;AAAA,SAUlCC,aAVkC,GAUlB,MAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKN,KAAL,CAAWO,OAAtC;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,KAAKP,KAAL,CAAWC,IAAX,CAAgB,UAAhB,EAA4BC,GAA5B,CAAgC,CAACM,IAAD,EAAOC,KAAP,kBAC/B;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC,YAAb;AAAA,gCAAgCA,KAAK,GAAC,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAI,YAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGG,KAAKC,SAAL,CAAeD,KAAf,EAAsBD,IAAtB,EAA4B,KAAKR,KAAL,CAAWC,IAAX,CAAgB,SAAhB,CAA5B,EAAwD,KAAKD,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAxD,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,EASG,KAAKU,iBAAL,CAAuB,KAAKX,KAAL,CAAWC,IAAX,CAAgB,UAAhB,EAA4BW,MAAnD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAaD,KAzBiC;;AAAA,SA2BlCF,SA3BkC,GA2BtB,CAACD,KAAD,EAAQD,IAAR,EAAcD,OAAd,EAAuBM,IAAvB,KAAgC;AAC1C,UAAGA,IAAI,KAAK,MAAZ,EAAoB;AAClB,YAAIC,YAAY,GAAG,MAAMC,MAAN,CAAa,IAAEP,IAAI,CAAC,SAAD,CAAnB,IAAkC,SAArD;AACA,4BACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,kCACI;AAAA,mCAAI;AAAM,cAAA,SAAS,EAAEM,YAAjB;AAA+B,cAAA,OAAO,EAAE,MAAM,KAAKE,oBAAL,CAA0BP,KAA1B,CAA9C;AAAA,wBAAiFD,IAAI,CAAC,MAAD;AAArF;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,eAAf;AAAA,uBACGD,OAAO,CAACL,GAAR,CAAYC,MAAM,IAAI;AACvB,kBAAIc,OAAO,GAAG,MAAMF,MAAN,CAAa,IAAEZ,MAAM,CAAC,SAAD,CAAN,CAAkBM,KAAlB,CAAf,IAA2C,SAAzD;AACA,kCAAO;AAAM,gBAAA,SAAS,EAAEQ,OAAjB;AAA0B,gBAAA,OAAO,EAAE,MAAM,KAAKC,iBAAL,CAAuBf,MAAM,CAAC,IAAD,CAA7B,EAAqCM,KAArC,CAAzC;AAAA,2BAAuFN,MAAM,CAAC,MAAD,CAA7F;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,aAHE,CADH,eAKA;AAAQ,cAAA,SAAS,EAAC,YAAlB;AAA+B,cAAA,OAAO,EAAE,MAAM,KAAKgB,UAAL,CAAgBV,KAAhB,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD;;AACD,UAAGI,IAAI,KAAK,QAAZ,EAAsB;AAClB,YAAGL,IAAI,CAAC,SAAD,CAAP,EAAoB;AAClB,8BACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCACE;AAAA,wBAAKA,IAAI,CAAC,MAAD;AAAT;AAAA;AAAA;AAAA;AAAA,oBADF,eAEI;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,wBACCD,OAAO,CAACL,GAAR,CAAYC,MAAM,IAAI;AACrB,oBAAIA,MAAM,CAAC,SAAD,CAAN,CAAkBM,KAAlB,CAAJ,EAA8B;AAC5B,sCAAO;AAAM,oBAAA,SAAS,EAAC,aAAhB;AAAA,8BAA+BN,MAAM,CAAC,MAAD;AAArC;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AACD,oCAAO;AAAM,kBAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD,eALA;AADD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAaD,SAdD,MAcO;AACL,8BACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,mCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD;AACF;;AACH,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAnEiC;AAAA;;AAqElCiB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBACG,KAAKrB,YAAL;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA3EiC;;AA8EpC,eAAeF,KAAf","sourcesContent":["\r\nimport React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\nclass Score extends React.Component {  \r\n\r\n  drawScoreBar = () => {\r\n    this.props.data[\"players\"].map(player => {\r\n      return (\r\n        <span className=\"playerScore\">{player[\"name\"]} - {player[\"score\"]} Test </span>\r\n      )\r\n    })\r\n  }\r\n    \r\n  buildWordList = () => {\r\n    console.log(\"WORDPLAYERS\", this.props.players)\r\n    return (\r\n        <div className=\"wordTable\">\r\n          {this.props.data[\"wordList\"].map((word, index) => \r\n            <div className=\"wordContainer\">\r\n              <p className=\"wordHeader\">Word {index+1}</p>\r\n              <hr className=\"hr\"/>\r\n              {this.buildWord(index, word, this.props.data[\"players\"], this.props.data[\"type\"])}\r\n            </div>\r\n          )\r\n          }  \r\n          {this.fillRemainingDivs(this.props.data[\"wordList\"].length)}\r\n        </div>\r\n      )\r\n  }\r\n\r\n  buildWord = (index, word, players, type) => {\r\n    if(type === \"host\") {\r\n      var visibleClass = \"not\".repeat(1-word[\"visible\"]) + \"visible\";\r\n      return (\r\n        <div className=\"word\">\r\n            <h1><span className={visibleClass} onClick={() => this.toggleWordVisibility(index)}>{word[\"word\"]}</span></h1>\r\n            <div className=\"playerGuesses\">\r\n              {players.map(player => {\r\n              var guessed = \"not\".repeat(1-player[\"guesses\"][index]) + \"guessed\";\r\n              return <span className={guessed} onClick={() => this.togglePlayerGuess(player[\"id\"], index)}>{player[\"name\"]} + </span>\r\n            })} \r\n            <button className=\"removeWord\" onClick={() => this.removeWord(index)}>Remove</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    if(type === \"player\") {\r\n        if(word[\"visible\"]) {\r\n          return (\r\n            <div className=\"word\">\r\n              <h1>{word[\"word\"]}</h1>\r\n                <div className=\"playerGuesses\">\r\n                {players.map(player => {\r\n                  if (player[\"guesses\"][index]) {\r\n                    return <span className=\"playerGuess\">{player[\"name\"]}</span>\r\n                  }\r\n                  return <span className=\"playerGuess\"></span>\r\n                })} \r\n                </div>\r\n            </div>\r\n            )        \r\n        } else {\r\n          return (\r\n            <div className=\"word\">\r\n              <h1>?????</h1>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    return <p>Problem loading game content</p>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"frame\">\r\n        {this.drawScoreBar()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Score;"]},"metadata":{},"sourceType":"module"}