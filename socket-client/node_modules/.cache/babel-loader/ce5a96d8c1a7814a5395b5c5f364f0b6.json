{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\util\\\\Timer.js\";\nimport React from 'react';\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      time: {},\n      seconds: 45\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n    let obj = {\n      \"h\": hours,\n      \"m\": minutes,\n      \"s\": seconds\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({\n      time: timeLeftVar\n    });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds\n    }); // Check if we're at zero.\n\n    if (seconds == 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  drawTimer() {\n    if (this.props.data.type === \"host\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.startTimer,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [this.state.time.m, \":\", this.state.time.s]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Timer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [this.state.time.m, \":\", this.state.time.s]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    return this.drawTimer();\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/util/Timer.js"],"names":["React","Timer","Component","constructor","state","time","seconds","timer","startTimer","bind","countDown","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","componentDidMount","timeLeftVar","setState","setInterval","clearInterval","drawTimer","props","data","type","m","s","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAEDE,EAAAA,aAAa,CAACC,IAAD,EAAM;AACjB,QAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,IAAI,KAAK,EAAT,CAAf,CAAZ;AAEA,QAAII,mBAAmB,GAAGJ,IAAI,IAAI,KAAK,EAAT,CAA9B;AACA,QAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAd;AAEA,QAAIE,mBAAmB,GAAGF,mBAAmB,GAAG,EAAhD;AACA,QAAIV,OAAO,GAAGQ,IAAI,CAACK,IAAL,CAAUD,mBAAV,CAAd;AAEA,QAAIE,GAAG,GAAG;AACR,WAAKP,KADG;AAER,WAAKI,OAFG;AAGR,WAAKX;AAHG,KAAV;AAKA,WAAOc,GAAP;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,WAAW,GAAG,KAAKX,aAAL,CAAmB,KAAKP,KAAL,CAAWE,OAA9B,CAAlB;AACA,SAAKiB,QAAL,CAAc;AAAElB,MAAAA,IAAI,EAAEiB;AAAR,KAAd;AACD;;AAEDd,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKD,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA5C,EAA+C;AAC7C,WAAKC,KAAL,GAAaiB,WAAW,CAAC,KAAKd,SAAN,EAAiB,IAAjB,CAAxB;AACD;AACF;;AAEDA,EAAAA,SAAS,GAAG;AACV;AACA,QAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,SAAKiB,QAAL,CAAc;AACZlB,MAAAA,IAAI,EAAE,KAAKM,aAAL,CAAmBL,OAAnB,CADM;AAEZA,MAAAA,OAAO,EAAEA;AAFG,KAAd,EAHU,CAQV;;AACA,QAAIA,OAAO,IAAI,CAAf,EAAkB;AAChBmB,MAAAA,aAAa,CAAC,KAAKlB,KAAN,CAAb;AACD;AACF;;AAEDmB,EAAAA,SAAS,GAAG;AACV,QAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,KAAyB,MAA5B,EAAoC;AAClC,0BACE;AAAA,gCACA;AAAQ,UAAA,OAAO,EAAE,KAAKrB,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA,qBAAI,KAAKJ,KAAL,CAAWC,IAAX,CAAgByB,CAApB,OAAwB,KAAK1B,KAAL,CAAWC,IAAX,CAAgB0B,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACE;AAAA,mBAAI,KAAK3B,KAAL,CAAWC,IAAX,CAAgByB,CAApB,OAAwB,KAAK1B,KAAL,CAAWC,IAAX,CAAgB0B,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,KAAKN,SAAL,EADF;AAGD;;AAvE+B;;AA0ElC,eAAezB,KAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = { time: {}, seconds: 45 };\r\n      this.timer = 0;\r\n      this.startTimer = this.startTimer.bind(this);\r\n      this.countDown = this.countDown.bind(this);\r\n    }\r\n  \r\n    secondsToTime(secs){\r\n      let hours = Math.floor(secs / (60 * 60));\r\n  \r\n      let divisor_for_minutes = secs % (60 * 60);\r\n      let minutes = Math.floor(divisor_for_minutes / 60);\r\n  \r\n      let divisor_for_seconds = divisor_for_minutes % 60;\r\n      let seconds = Math.ceil(divisor_for_seconds);\r\n  \r\n      let obj = {\r\n        \"h\": hours,\r\n        \"m\": minutes,\r\n        \"s\": seconds\r\n      };\r\n      return obj;\r\n    }\r\n  \r\n    componentDidMount() {\r\n      let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n      this.setState({ time: timeLeftVar });\r\n    }\r\n  \r\n    startTimer() {\r\n      if (this.timer == 0 && this.state.seconds > 0) {\r\n        this.timer = setInterval(this.countDown, 1000);\r\n      }\r\n    }\r\n  \r\n    countDown() {\r\n      // Remove one second, set state so a re-render happens.\r\n      let seconds = this.state.seconds - 1;\r\n      this.setState({\r\n        time: this.secondsToTime(seconds),\r\n        seconds: seconds,\r\n      });\r\n      \r\n      // Check if we're at zero.\r\n      if (seconds == 0) { \r\n        clearInterval(this.timer);\r\n      }\r\n    }\r\n    \r\n    drawTimer() {\r\n      if(this.props.data.type === \"host\") {\r\n        return (\r\n          <div>  \r\n          <button onClick={this.startTimer}>Start</button>\r\n          <p>{this.state.time.m}:{this.state.time.s}</p>\r\n          </div>\r\n        )\r\n      }\r\n      return (\r\n        <div className=\"Timer\">\r\n          <p>{this.state.time.m}:{this.state.time.s}</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        this.drawTimer()\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Timer;"]},"metadata":{},"sourceType":"module"}