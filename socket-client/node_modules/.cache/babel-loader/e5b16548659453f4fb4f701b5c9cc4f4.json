{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\Website\\\\mind-reader\\\\socket-client\\\\src\\\\game\\\\assets\\\\WordTable.js\";\nimport React from 'react';\nimport { socket } from \"../../service/socket\";\n\nclass WordTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.buildWordList = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.fillRemainingDivs(this.props.data[\"wordList\"].length)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.fillRemainingDivs = start => {\n      var emptyWords = [];\n\n      for (var i = start; i <= 10; i++) {\n        console.log(\"III\", i);\n        emptyWords.push(this.emptyFrame());\n      }\n\n      return emptyWords;\n    };\n\n    this.emptyFrame = () => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"wordContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }, this);\n    };\n\n    this.toggleWordVisibility = index => {\n      socket.emit('toggle word visibility', index);\n    };\n\n    this.togglePlayerGuess = (id, index) => {\n      socket.emit('toggle player guess for word', id, index);\n    };\n\n    this.removeWord = index => {\n      socket.emit('remove word', index);\n    };\n\n    this.buildWord = (index, word, players, type) => {\n      if (type === \"host\") {\n        var visibleClass = \"not\".repeat(1 - word[\"visible\"]) + \"visible\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: visibleClass,\n              onClick: () => this.toggleWordVisibility(index),\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.removeWord(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: players.map(player => {\n              var guessed = \"not\".repeat(1 - player[\"guesses\"][index]) + \"guessed\";\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                className: guessed,\n                onClick: () => this.togglePlayerGuess(player[\"id\"], index),\n                children: [player[\"name\"], \" + \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 20\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this);\n      }\n\n      if (type === \"player\") {\n        if (word[\"visible\"]) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: word[\"word\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), players.map(player => {\n              if (player[\"guesses\"][index]) {\n                return /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [player[\"name\"], \" + \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 28\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"?????\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Problem loading game content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      children: this.buildWordList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WordTable;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/Website/mind-reader/socket-client/src/game/assets/WordTable.js"],"names":["React","socket","WordTable","Component","buildWordList","fillRemainingDivs","props","data","length","start","emptyWords","i","console","log","push","emptyFrame","toggleWordVisibility","index","emit","togglePlayerGuess","id","removeWord","buildWord","word","players","type","visibleClass","repeat","map","player","guessed","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {socket} from \"../../service/socket\";\r\n\r\nclass WordTable extends React.Component {  \r\n\r\n  buildWordList = () => {\r\n    return (\r\n        <div>\r\n          {this.fillRemainingDivs(this.props.data[\"wordList\"].length)}\r\n        </div>\r\n      )\r\n  }\r\n\r\n  fillRemainingDivs = (start) => {\r\n    var emptyWords = [];\r\n    for (var i = start; i <= 10; i++) {\r\n      console.log(\"III\",i)\r\n      emptyWords.push(this.emptyFrame());\r\n    }\r\n    return emptyWords\r\n  }\r\n\r\n  emptyFrame = () => {\r\n    <div className=\"wordContainer\">\r\n      <p>Word</p>\r\n    </div>\r\n  }\r\n\r\n  toggleWordVisibility = (index) => {\r\n    socket.emit('toggle word visibility', index);\r\n  }\r\n\r\n  togglePlayerGuess = (id, index) => {\r\n    socket.emit('toggle player guess for word', id, index);\r\n  }\r\n\r\n  removeWord = (index) => {\r\n    socket.emit('remove word', index);\r\n  }\r\n\r\n  buildWord = (index, word, players, type) => {\r\n    if(type === \"host\") {\r\n      var visibleClass = \"not\".repeat(1-word[\"visible\"]) + \"visible\";\r\n      return (\r\n        <div className=\"word\">\r\n          <h1><span className={visibleClass} onClick={() => this.toggleWordVisibility(index)}>{word[\"word\"]}</span></h1>\r\n          <button onClick={() => this.removeWord(index)}>Remove</button>\r\n          <div>{players.map(player => {\r\n            var guessed = \"not\".repeat(1-player[\"guesses\"][index]) + \"guessed\";\r\n            return <span className={guessed} onClick={() => this.togglePlayerGuess(player[\"id\"], index)}>{player[\"name\"]} + </span>\r\n          })} \r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    if(type === \"player\") {\r\n        if(word[\"visible\"]) {\r\n          return (\r\n            <div className=\"word\">\r\n              <h1>{word[\"word\"]}</h1>\r\n                {players.map(player => {\r\n                  if (player[\"guesses\"][index]) {\r\n                    return <span>{player[\"name\"]} + </span>\r\n                  }\r\n                })} \r\n            </div>\r\n            )        \r\n        } else {\r\n          return (\r\n            <div className=\"word\">\r\n              <h1>?????</h1>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    return <p>Problem loading game content</p>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"frame\">\r\n        {this.buildWordList()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordTable;"]},"metadata":{},"sourceType":"module"}